package gr.unipi.thesis.dimstyl.utilities;

import lombok.experimental.UtilityClass;

import java.security.SecureRandom;
import java.time.LocalDate;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

@UtilityClass
public final class RegistrationUtil {

    private final static Random random = new SecureRandom();

    public static String generateUsername(String firstName, String lastName, LocalDate dateOfBirth) {
        /*
        - This code snippet demonstrates the basic principle of username generation using the client's
        first name, last name and year of birth. Additional logic would be required for real-world use,
        including handling username conflicts.
        - username is generated by combining the firstName, LastName and the last 2 digits of the
        client's year of birth.
        */
        String fn = firstName.toLowerCase();
        String ln = lastName.substring(0, 1).toUpperCase() + lastName.substring(1).toLowerCase();
        String dob = String.valueOf(dateOfBirth.getYear()).substring(2);
        return fn + ln + dob;
    }

    public static String generatePassword() {
        Stream<Character> pwdStream = Stream.concat(
                getRandomNumbers(3),
                Stream.concat(
                        getRandomSpecialChars(3),
                        Stream.concat(
                                getRandomAlphabets(2, true),
                                getRandomAlphabets(4, false)
                        )
                )
        );

        List<Character> charList = pwdStream.collect(Collectors.toList());
        Collections.shuffle(charList);

        return charList.stream()
                .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
                .toString();
    }

    private static Stream<Character> getRandomAlphabets(int count, boolean upperCase) {
        IntStream characters;
        if (upperCase) {
            characters = random.ints(count, 65, 90);
        } else {
            characters = random.ints(count, 97, 122);
        }
        return characters.mapToObj(data -> (char) data);
    }

    public static Stream<Character> getRandomNumbers(int count) {
        IntStream numbers = random.ints(count, 48, 57);
        return numbers.mapToObj(data -> (char) data);
    }

    private static Stream<Character> getRandomSpecialChars(int count) {
        IntStream specialChars = random.ints(count, 33, 45);
        return specialChars.mapToObj(data -> (char) data);
    }

}
